name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test'
        required: true
        default: 'main'
        type: string

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      # Setup Node.js with specific version
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.9.0"

      # Install pnpm with specific version
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Setup pnpm cache
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies with retry and proper permissions
      - name: Install dependencies
        run: |
          mkdir -p "${PNPM_HOME}"
          chmod -R 777 "${PNPM_HOME}"
          for i in {1..3}; do
            pnpm install --frozen-lockfile && break
            rm -rf node_modules
            sleep 5
          done
        env:
          PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin

      # Verify packages are correctly installed
      - name: Verify installation
        run: pnpm list

      # Set Nx SHAs for affected commands
      - uses: nrwl/nx-set-shas@v4

      # Run lint and tests
      - name: Lint
        run: pnpm exec nx affected -t lint --parallel=3

      - name: Test
        run: pnpm exec nx affected -t test --parallel=3

      # Build affected projects
      - name: Build
        run: pnpm exec nx affected -t build --parallel=3

      # Run store prune only after successful build
      - name: Cleanup pnpm store
        if: success()
        run: pnpm store prune
